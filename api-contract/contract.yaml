openapi: 3.0.1
info:
  title: ConnectMe
  description: 'c1790-ed-proyecto-final: a toy social network.'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://europe-west2-c1790-ed-proyecto-final.cloudfunctions.net/api
- url: http://localhost:5001/c1790-ed-proyecto-final/europe-west2/api
tags:
- name: authentication
  description: Operations about authentication
- name: user profile
  description: Operations about user profile
- name: post
  description: Operations about posts
paths:
  /user:
    post:
      tags:
      - authentication
      summary: Create user
      description: This can be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/guest:
    post:
      tags:
      - authentication
      summary: Create guest account
      description: This can be done without being authenticated.
      operationId: createGuest
      requestBody:
        description: Created guest object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/login:
    post:
      tags:
      - authentication
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
      - authentication
      summary: Logs out current logged in user session
      operationId: logoutUser
      security:
        - bearer_auth: [bearer_auth]
      responses:
        default:
          description: successful operation
          content: {}
  /user/recover:
    put:
      tags:
      - authentication
      summary: Recovers an account password
      operationId: recoverPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recover'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user profile
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: |
          The username that needs to be fetched. Use user1 for testing.

          When unauthorized, it will only fetch the public information
        required: true
        schema:
          type: string
      security:
        - none: []
        - bearer_auth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user profile
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      security:
        - bearer_auth: []
      requestBody:
        description: Updated user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - authentication
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      security:
        - bearer_auth: []          
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /post:
    get:
      tags:
      - post
      summary: View post
      description: This can be done by the logged in user.
      operationId: viewPost
      requestBody:
        description: View post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
    post:
      tags:
      - post
      summary: Create post
      description: This can be done by the logged in user.
      operationId: createPost
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
    put:
      tags:
      - post
      summary: Edit post
      description: This can be done by the logged in user.
      operationId: editPost
      requestBody:
        description: Edit post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
    delete:
      tags:
      - post
      summary: Delete post
      description: This can be done by the logged in user.
      operationId: deletePost
      requestBody:
        description: Delete post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
  /post/comment:
    get:
      tags:
      - post
      summary: View comment
      description: This can be done by the logged in user.
      operationId: viewComment
      requestBody:
        description: View post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
    post:
      tags:
      - post
      summary: Create comment
      description: This can be done by the logged in user.
      operationId: createComment
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
    put:
      tags:
      - post
      summary: Edit post
      description: This can be done by the logged in user.
      operationId: editPost
      requestBody:
        description: Edit post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
    delete:
      tags:
      - post
      summary: Delete comment
      description: This can be done by the logged in user.
      operationId: deleteComment
      requestBody:
        description: Delete post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
        - bearer_auth: []
      responses:
        default:
          description: successful operation
          content: {}
          
components:
  schemas:
    Authentication:
      type: object
      properties:
        userId:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        website:
          type: string
        location:
          type: string
        imageProfile: 
          type: string
          format: binary
        birthday:
          type: string
    Guest:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        imageProfile: 
          type: string
          format: binary
    Recover:
      type: object
      properties:
        username:
          type: string
        userId:
          type: string
        email:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string
    UserProfile:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        website:
          type: string
        location:
          type: string
        imageProfile: 
          type: string
          format: binary
        createdAt:
          type: string
        lastSeen:
          type: string
        friends:
          type: integer
        likes:
          type: integer
        posts:
          type: integer
        birthday:
          type: string
    Post:
      type: object
      properties:
        username:
          type: string
        title:
          type: string
        post:
          type: string
        canLike:
          type: boolean
        canUnlike:
          type: boolean
        likeCount:
          type: integer
        commentCount:
          type: integer
        tag:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        imageProfile:
          type: string
          format: binary     
    ApiResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer